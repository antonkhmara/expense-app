plugins {
	id("com.github.johnrengelman.shadow") version "7.1.0"
	id("io.micronaut.application") version "3.0.1"
}

version = "0.1"
group = "by.khmara.godel"

repositories {
	mavenCentral()
}

micronaut {
	runtime("netty")
	testRuntime("junit5")
	processing {
		incremental(true)
		annotations("by.khmara.godel.*")
	}
}

dependencies {
	implementation("io.micronaut.data:micronaut-data-hibernate-jpa")

	annotationProcessor("org.projectlombok:lombok")
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.data:micronaut-data-processor")
	implementation("io.micronaut:micronaut-http-client")
	implementation("io.micronaut:micronaut-runtime")
	implementation("io.micronaut.data:micronaut-data-jdbc")
	implementation("io.micronaut.data:micronaut-data-r2dbc")
	implementation("io.micronaut.reactor:micronaut-reactor")
	implementation("io.micronaut.reactor:micronaut-reactor-http-client")
	implementation("io.micronaut.flyway:micronaut-flyway")
	implementation("javax.annotation:javax.annotation-api")
	compileOnly("org.projectlombok:lombok")
	runtimeOnly("ch.qos.logback:logback-classic")
	runtimeOnly("io.r2dbc:r2dbc-postgresql")
	runtimeOnly("org.postgresql:postgresql")
	testImplementation("org.assertj:assertj-core")
	testImplementation("org.testcontainers:junit-jupiter")
	testImplementation("org.testcontainers:r2dbc")
	testImplementation("org.testcontainers:postgresql")
	testImplementation("org.testcontainers:testcontainers")
	implementation("io.micronaut:micronaut-validation")
}

application {
	mainClass.set("by.khmara.godel.Application")
}

jar {
	manifest {
		attributes('Main-Class': 'by.khmara.godel.Application')
	}
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	from {
		configurations.all.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

